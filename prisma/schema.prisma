generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?    @unique
  firstName     String
  lastName      String
  email         String     @unique
  password      String
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  bio           String?
  contactNumber String
  gender        Gender
  dob           DateTime?
  address       String?
  photoUrl      String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  education   Education[]
  socialLinks SocialLinks[]
  orders      Order[]

  @@map("users")
}

model BookSpeaker {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  profession   String
  language     String
  location     String
  experience   String
  bio          String
  expertise    String[]
  achievements String[]
  reasons      String
  imageUrl     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("book-speakers")
}
model BookingBookSpeaker {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  contactNumber String
  email String
  selectDateAndTime DateTime
  yourNote String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model Education {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  degree      String?
  institution String?
  field       String?
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])
}

model SocialLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  twitter   String?
  linkedin  String?
  instagram String?
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
}

model Order {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  category  OrderCategory
  amount    Float
  status    OrderStatus   @default(PENDING)
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
}

model Book {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  bookName         String
  authorName       String
  price            Float
  brand            String
  description      String
  language         String
  size             String
  availableFormats String[]
  category         String
  isPublished      Boolean  @default(false)
  publishDate      DateTime @default(now())
  rating           Float    @default(0)
  bookCover        String
  book             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("books")
}

model Course {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  courseTitle         String
  mentorName          String
  price               Float
  totalVideo          Int
  language            String
  duration            String
  description         String
  isPublished         Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  courseModules       CourseModule[] // One Course -> Many Modules
  courseCertificateId String              @db.ObjectId
  // courseCertificate   CourseCertificate @relation(fields: [courseCertificateId], references: [id])
  courseCertificate   CourseCertificate[]

  @@map("courses")
}

model CourseModule {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  moduleTitle        String
  courseModuleVideos CourseModuleVideo[] // One Module -> Many Videos
  courseId           String              @db.ObjectId
  course             Course              @relation(fields: [courseId], references: [id])

  @@map("courseModules")
}

model CourseModuleVideo {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  videoTitle     String
  fileUrl        String
  courseModuleId String       @db.ObjectId
  courseModule   CourseModule @relation(fields: [courseModuleId], references: [id])

  @@map("courseModuleVideos")
}

model CourseCertificate {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  certificateTitle String
  certificateUrl   String
  courseId         String   @db.ObjectId
  course           Course   @relation(fields: [courseId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // courses          Course[] // One Certificate -> Many Courses

  @@map("courseCertificates")
}

model Blog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  blogTitle    String
  content      String
  category     String[]
  featureMedia String[]
  isPublished  Boolean  @default(false)
  publishDate  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("blogs")
}

model Podcast {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  podcastTitle   String
  secondaryTitle String
  constent       String
  featureMedia   String[]
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("podcasts")
}

model Contact {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  message     String
  createdAt      DateTime @default(now())

  @@map("contacts")
}
model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletters")
}
model Counter {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  seq  Int
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PAID
}

enum OrderCategory {
  BOOK
  COURSE
  PODCAST
  BLOG
}
