generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   firstName   String
//   lastName    String
//   email       String     @unique
//   password    String
//   phoneNumber String
//   dateOfBirth DateTime
//   gender      Gender
//   role        UserRole   @default(USER)
//   status      UserStatus @default(ACTIVE)
//   photoUrl    String?
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt

//   @@map("users")
// }

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String       @unique
  password      String
  role          UserRole     @default(USER)
  bio           String?
  contactNumber String?
  gender        Gender?
  address       String?
  educationId   String?      @db.ObjectId
  socialLinksId String?      @db.ObjectId
  education     Education?   @relation(fields: [educationId], references: [id])
  socialLinks   SocialLinks? @relation(fields: [socialLinksId], references: [id])
  orders        Order[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("users")
}

model Education {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  degree      String?
  institution String?
  field       String?
  user        User[]
}

model SocialLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  twitter   String?
  linkedin  String?
  instagram String?
  user      User[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  category  OrderCategory
  amount    Float
  status    OrderStatus @default(PENDING)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Book {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  bookName    String
  authorName  String
  price       Float
  brand       String
  language    String
  size        String
  category    String
  isPublished Boolean @default(false)
  bookCover   String
  book        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("books")
}

model Course {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  courseTitle         String
  mentorName          String
  price               Float
  totalVideo          Int
  language            String
  duration            String
  description         String
  isPublished         Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  courseModules       CourseModule[] // One Course -> Many Modules
  courseCertificateId String            @db.ObjectId
  courseCertificate   CourseCertificate @relation(fields: [courseCertificateId], references: [id])

  @@map("courses")
}

model CourseModule {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  moduleTitle        String
  courseModuleVideos CourseModuleVideo[] // One Module -> Many Videos
  courseId           String              @db.ObjectId
  course             Course              @relation(fields: [courseId], references: [id])

  @@map("courseModules")
}

model CourseModuleVideo {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  videoTitle     String
  fileUrl        String
  courseModuleId String       @db.ObjectId
  courseModule   CourseModule @relation(fields: [courseModuleId], references: [id])

  @@map("courseModuleVideos")
}

model CourseCertificate {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  certificateTitle String
  certificateUrl   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  courses          Course[] // One Certificate -> Many Courses

  @@map("courseCertificates")
}

model Blog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  blogTitle    String
  content      String
  featureMedia String[]
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("blogs")
}

model Podcast {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  podcastTitle   String
  secondaryTitle String
  constent       String
  featureMedia   String[]
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("podcasts")
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  USER
  ADMIN
}
enum OrderStatus {
  PENDING
  PAID
}
enum OrderCategory {
  BOOK
  COURSE
  PODCAST
  BLOG
}